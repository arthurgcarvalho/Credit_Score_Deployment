library(shiny); source('main.R')
x <- c(1)
class(x)
class(x) <- "character"
class(x)
source('main.R')
source('main.R')
source('main.R')
source('main.R')
source('main.R')
source('main.R')
source('main.R')
source('main.R')
runApp('App-1')
library("ROracle")
connect.string <- "(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)
(HOST=sbaoracle.sba.muohio.edu)(PORT=1521))
(CONNECT_DATA=(SERVICE_NAME=oracle.sba.muohio.edu)))"
drv <- dbDriver("Oracle")
con <- dbConnect(drv, username = "carvalag", password = "m7ami", dbname = connect.string)
bank_data <- dbGetQuery(con, "SELECT * FROM CARVALAG.BANK")
write.csv(bank_data, "bank_data.csv", row.names = FALSE)
bank_data$CHECKING_STATUS      <- as.factor(bank_data$CHECKING_STATUS)
bank_data$CREDIT_HISTORY       <- as.factor(bank_data$CREDIT_HISTORY)
bank_data$PURPOSE              <- as.factor(bank_data$PURPOSE)
bank_data$SAVINGS_STATUS       <- as.factor(bank_data$SAVINGS_STATUS)
bank_data$EMPLOYMENT           <- as.factor(bank_data$EMPLOYMENT)
bank_data$PERSONAL_STATUS      <- as.factor(bank_data$PERSONAL_STATUS)
bank_data$OTHER_PARTIES        <- as.factor(bank_data$OTHER_PARTIES)
bank_data$PROPERTY_MAGNITUDE   <- as.factor(bank_data$PROPERTY_MAGNITUDE)
bank_data$OTHER_PAYMENT_PLANS  <- as.factor(bank_data$OTHER_PAYMENT_PLANS)
bank_data$HOUSING              <- as.factor(bank_data$HOUSING)
bank_data$JOB                  <- as.factor(bank_data$JOB)
bank_data$OWN_TELEPHONE        <- as.factor(bank_data$OWN_TELEPHONE)
bank_data$FOREIGN_WORKER       <- as.factor(bank_data$FOREIGN_WORKER)
bank_data$TARGET               <- as.factor(bank_data$TARGET)
splitDataFrame <- function(df, pct) {
#calculates the number of rows in the data frame
number_rows  <- nrow(df)
#calculates the number of rows of one data frame
number_rows_df1    <- round ( pct * number_rows )
#sample row indices to "fill in" the first data frame
rows_df_1  <- sample (1:number_rows,  number_rows_df1,
replace= FALSE )
#creating data frames
df_1 <- df[rows_df_1, ]
df_2 <- df[-rows_df_1, ]
returned_dfs        <- list(df_1, df_2)
return(returned_dfs)
}
split_data <- splitDataFrame(bank_data, 0.66)
training_data <- split_data[[1]]
testing_data  <- split_data[[2]]
library("rpart")
library("randomForest")
tree   <- rpart ( TARGET ~ .,  data = training_data,
method ="class",  parms = list (split = "information"))
forest <- randomForest (TARGET ~ . ,  data = training_data, ntree = 1000 )
library("Metrics")
classification_tree_train   <- predict (tree, training_data, "class")
classification_forest_train <- predict (forest, training_data, "class")
accuracy_tree_train   <- accuracy(actual    = training_data$TARGET,
predicted = classification_tree_train)
accuracy_forest_train <- accuracy(actual    = training_data$TARGET,
predicted = classification_forest_train)
classification_tree_test   <- predict (tree, testing_data, "class")
classification_forest_test <- predict (forest, testing_data, "class")
accuracy_tree_test   <- accuracy(actual    = testing_data$TARGET,
predicted = classification_tree_test)
accuracy_forest_test <- accuracy(actual    = testing_data$TARGET,
predicted = classification_forest_test)
applicant <- data.frame(CHECKING_STATUS = "no checking",
DURATION = 72,
CREDIT_HISTORY = "all paid",
PURPOSE = "new car",
CREDIT_AMOUNT = 2015,
SAVINGS_STATUS = "no known savings",
EMPLOYMENT = ">=7",
INSTALLMENT_COMMITMENT = 4,
PERSONAL_STATUS = "male single",
OTHER_PARTIES = "guarantor",
RESIDENCE_SINCE = 3,
PROPERTY_MAGNITUDE = "car",
AGE = 43,
OTHER_PAYMENT_PLANS = "none",
HOUSING = "rent",
EXISTING_CREDITS = 2,
JOB = "skilled",
NUM_DEPENDENTS = 1,
OWN_TELEPHONE = "yes",
FOREIGN_WORKER = "no")
predict(tree, applicant, "class")
predict(tree, applicant)
x<-predict(tree, applicant)
source('main.R')
source('main.R')
runApp("App-1", display.mode = "showcase")
runApp("App-1", display.mode = "showcase")
library(shiny); source('main.R')
library(shiny); source('main.R')
source('main.R')
source('main.R')
source('main.R')
source('main.R')
runApp("App-1", display.mode = "showcase")
runApp("App-1", display.mode = "showcase")
runApp("App-1", display.mode = "showcase")
library(shiny); source('main.R')
library(shiny); source('main.R')
library(shiny); source('main.R')
source('main.R')
